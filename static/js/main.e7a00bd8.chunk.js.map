{"version":3,"sources":["components/contactList/ContactList.module.css","components/contactEditorElement/ContactEditorElement.module.css","components/notification/Notification.module.css","components/filter/Filter.module.css","components/contactEditor/ContactEditor.module.css","components/App.module.css","components/contactListItem/ContactListItem.js","redux/contacts/contactsAction.js","components/contactList/ContactList.js","components/filter/Filter.js","components/contactEditorElement/ContactEditorElement.js","components/notification/Notification.js","components/logo/Logo.js","components/contactEditor/ContactEditor.js","components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","ContactListItem","idx","number","name","id","onDelete","type","onClick","data-id","addContact","createAction","data","payload","uuidv4","deleteContact","getFilter","getLocalContacts","connect","state","contacts","items","filter","contact","toLowerCase","includes","dispatch","onHandleDelete","e","target","dataset","TransitionGroup","component","className","styles","contactData","map","CSSTransition","timeout","classNames","mapDispatchToProps","onChange","value","length","search","placeholder","ContactEditorElement","onHandelChange","form","onSubmit","Notification","isVisible","message","in","unmountOnExit","notification","Logo","initialState","ContactEditor","setState","handelSubmit","preventDefault","props","find","setTimeout","onAddForm","persistedContacts","localStorage","getItem","this","JSON","parse","prevProps","prevState","setItem","stringify","appear","Component","App","createReducer","action","item","_","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7a00bd8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__1FFrT\",\"contactData\":\"ContactList_contactData__Y-QyP\",\"enter\":\"ContactList_enter__5jOCP\",\"enterActive\":\"ContactList_enterActive__2EZSq\",\"exit\":\"ContactList_exit__5_Hvl\",\"exitActive\":\"ContactList_exitActive__2gbwb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactEditorElement_contact__1FmQV\",\"form\":\"ContactEditorElement_form__1BRn_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__zzxlk\",\"enter\":\"Notification_enter__j7N5g\",\"enterActive\":\"Notification_enterActive__n6D3N\",\"exit\":\"Notification_exit__1DmJ4\",\"exitActive\":\"Notification_exitActive__20yi0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Filter_search__1uW5F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"ContactEditor_appear__1J9zr\",\"appearActive\":\"ContactEditor_appearActive__3SiHw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"App_enter__2so6j\",\"enterActive\":\"App_enterActive__1WKBi\",\"exit\":\"App_exit__dDnP5\",\"exitActive\":\"App_exitActive__1rDw_\"};","import React from 'react'\r\n\r\nconst ContactListItem = ({idx, number, name, id, onDelete}) => {\r\n    return (\r\n        <li>\r\n   <p>{idx+1}.  Name: {name}</p>\r\n   <p>  {number}</p>\r\n   <button type='button' onClick={onDelete} data-id={id}>Delete</button>\r\n   </li>\r\n    )\r\n}\r\n\r\nexport default ContactListItem\r\n","import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n\r\nexport const addContact = createAction('contacts/add', (data) => ({\r\n    payload: {\r\n        ...data,\r\n        id: uuidv4(),\r\n    }}))\r\nexport const deleteContact = createAction('contacts/delete')\r\nexport const getFilter = createAction('contacts/filter')\r\nexport const getLocalContacts = createAction('contacts/localContacts')\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import { v4 as uuidv4 } from \"uuid\";\r\nimport contactActions from './contactsActionsTypes'\r\n\r\n  const addContact = (data) => ({\r\n    type: contactActions.ADD_CONTACT,\r\n    payload: {\r\n        ...data,\r\n        id: uuidv4(),\r\n    }\r\n    \r\n    })\r\n    export const deleteContact = id => ({\r\n        type: contactActions.DELETE_CONTACT,\r\n        payload: {\r\n            id,\r\n        }\r\n        \r\n        })\r\n       export const getFilter = value => ({\r\n            type: contactActions.FILTER_CONTACTS,\r\n            payload: {\r\n                value,\r\n            }\r\n            \r\n            })\r\n        const setAlert = () => ({\r\n            type: contactActions.SET_ALERT,   \r\n            })\r\n\r\n            \r\n   export default {\r\n    addContact,\r\n    setAlert\r\n    \r\n    \r\n   } */\r\n\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport styles from './ContactList.module.css'\r\nimport PropTypes from 'prop-types';\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\nimport ContactListItem from '../contactListItem/ContactListItem'\r\nimport {deleteContact} from '../../redux/contacts/contactsAction'\r\n\r\n\r\nconst ContactList = ({contacts, deleteContact}) => {\r\n  const onHandleDelete = (e) => {\r\n    const  id  = e.target.dataset.id;\r\n    deleteContact(id)}\r\n  return (\r\n\r\n <TransitionGroup component='ul' className= {styles.contactData}>\r\n   {contacts.map(({id, name, number}, idx) => \r\n   <CSSTransition  key={id} timeout={1000} classNames={styles} > \r\n        <ContactListItem id={id} name={name} number={number} idx={idx} onDelete={onHandleDelete}/>    \r\n   </CSSTransition>\r\n   )}\r\n </TransitionGroup>\r\n)\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n contacts: state.contacts.items.filter(contact => contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase()))\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    deleteContact: (id) =>\r\n    {\r\n      dispatch(deleteContact(id))\r\n    }\r\n\r\n  }\r\n}\r\n\r\n\r\nContactList.propTypes = {\r\n\tcontacts: PropTypes.array.isRequired,\r\n\tonDelete: PropTypes.func.isRequired\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport styles from './Filter.module.css'\r\nimport PropTypes from 'prop-types';\r\nimport {getFilter} from '../../redux/contacts/contactsAction'\r\n\r\nconst Filter = ({items, value, onChange}) => {\r\n    \r\n    return (\r\n        <div>\r\n            {items.length > 1 && <input className ={styles.search} type='text' value={value} placeholder=\"Search by name\"\r\n             onChange={e => onChange(e.target.value)}/>}\r\n        </div>   )\r\n}\r\nconst mapStateToProps = state => ({\r\n    value: state.contacts.filter,\r\n    items: state.contacts.items\r\n})\r\nconst mapDispatchToProps = {\r\n    onChange: getFilter,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter)\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired\r\n};","import React from 'react'\r\nimport styles from './ContactEditorElement.module.css'\r\n\r\n\r\nconst ContactEditorElement = ({name, number, onChange, onHandelChange}) => {\r\n\r\n  \r\n      return (\r\n     \r\n        <div className={styles.contact}>         \r\n      <form className={styles.form} onSubmit={onChange}>\r\n        <label> \r\n        <input type='text' name='name' value={name } placeholder='Name'\r\n        onChange={onHandelChange}/> \r\n          </label>\r\n          <label> \r\n         <input type='tel' name='number' value={number }  placeholder='Number'\r\n        onChange={onHandelChange}/> \r\n        </label>\r\n        <button type=\"submit\">Add contact </button>\r\n      </form>   \r\n            </div>\r\n       \r\n\r\n    ) \r\n       \r\n}\r\nexport default  ContactEditorElement\r\n\r\n","import React from 'react'\r\nimport styles from './Notification.module.css'\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\nconst Notification = ({isVisible, message}) => {\r\n    return (\r\n        <CSSTransition\r\n        in={isVisible}\r\n        timeout = {250}\r\n        classNames={styles}\r\n        unmountOnExit>\r\n        <div className={styles.notification} >\r\n        {message}\r\n        </div>\r\n        </CSSTransition>\r\n        \r\n    )\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <h2 className='title'>\r\n            PHONEBOOK\r\n        </h2>\r\n    )\r\n}\r\n\r\nexport default Logo\r\n","import React, { Component } from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport ContactEditorElement from '../contactEditorElement/ContactEditorElement'\r\nimport {connect} from 'react-redux'\r\nimport styles from '../contactEditor/ContactEditor.module.css'\r\nimport contactsAction from '../../redux/contacts/contactsAction'\r\nimport {getLocalContacts, addContact} from '../../redux/contacts/contactsAction'\r\nimport Notification from '../../components/notification/Notification'\r\nimport Logo from '../logo/Logo'\r\nimport Filter from '../filter/Filter'\r\n\r\nconst initialState = {\r\n  name: '',\r\n  number: '',\r\n \r\n}\r\n\r\n class ContactEditor extends Component {\r\n    state = {...initialState}\r\n    state ={isVisible: false, message:''}\r\n\r\n    componentDidMount() {\r\n      const persistedContacts = localStorage.getItem('contacts');\r\n      if (persistedContacts) {\r\n          this.props.getLocalContacts(JSON.parse(persistedContacts))\r\n      }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n      if (prevProps.items !== this.props.items) {\r\n        localStorage.setItem('contacts', JSON.stringify(this.props.items));\r\n      }\r\n    }\r\n   \r\n\r\n    onHandelChange = (e) => {\r\n      const {name, value} = e.target\r\n      this.setState({[name]: value})\r\n    }\r\n      \r\n    handelSubmit = (e) => {\r\n    e.preventDefault();\r\n    const search =this.props.items.find(contact => contact.name === this.state.name);\r\n    if (search) \r\n      {setTimeout(()=>this.setState({isVisible: true,  message:'Contact already exists'}), 500)\r\n        setTimeout(()=>this.setState({isVisible: false}), 2000)\r\n        this.setState({...initialState})\r\n      }\r\n    else if (this.state.name === '' || this.state.number === '' ){\r\n      setTimeout(()=>this.setState({isVisible: true, message:'Fill all fields'}), 500)\r\n        setTimeout(()=>this.setState({isVisible: false}), 2000)\r\n        this.setState({...initialState})\r\n    }\r\n    else {\r\n      this.props.onAddForm(this.state)\r\n      this.setState({...initialState})\r\n      }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <>\r\n          <Notification isVisible={this.state.isVisible} message = {this.state.message}/>\r\n          <CSSTransition\r\n           in={true}\r\n           appear={true}\r\n           classNames={styles}\r\n           timeout={500}\r\n           unmountOnExit> \r\n           <Logo/>\r\n           </CSSTransition>\r\n\r\n          <ContactEditorElement name={this.state.name} number={this.state.number} \r\n          onChange={this.handelSubmit} onHandelChange={this.onHandelChange}/>\r\n           </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapPropsToState = state => ({\r\n  items: state.contacts.items\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  onAddForm: addContact,\r\n  getLocalContacts: getLocalContacts,\r\n  \r\n}\r\n\r\n\r\nexport default  connect(mapPropsToState, mapDispatchToProps)(ContactEditor)\r\n\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////\r\n\r\n\r\n/*import React, { useState } from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport {connect} from 'react-redux'\r\nimport ContactEditorElement from '../contactEditorElement/ContactEditorElement'\r\nimport Logo from '../logo/Logo'\r\nimport styles from '../contactEditor/ContactEditor.module.css'\r\nimport contactsAction from '../../redux/contacts/contactsAction'\r\n\r\nconst initialState = {\r\n  name: '',\r\n  number: '',\r\n}\r\n\r\nconst ContactEditor = ({onAddForm}) => {\r\n\r\nconst[state, setState] = useState({...initialState})  \r\n\r\n    const onHandelChange = (e) => {\r\n        const {name} = e.target\r\n        setState({...state, [name]: e.target.value})\r\n      }\r\n      \r\n  const  handelSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n   onAddForm({name: state.name, number: state.number})\r\n    setState({...initialState})\r\n    }\r\n    \r\n  \r\n        return (\r\n          <div className={styles.phoneBook}>\r\n          <CSSTransition\r\n           in={true}\r\n           appear={true}\r\n           classNames={styles}\r\n           timeout={500}\r\n           unmountOnExit\r\n           > \r\n           <Logo/>\r\n           </CSSTransition>\r\n          <ContactEditorElement name={state.name} number={state.number} \r\n          onChange={handelSubmit} onHandelChange={onHandelChange}/>\r\n            </div>   \r\n        )\r\n    \r\n}*/\r\n\r\n/*const mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAddForm: (name, number) => dispatch(contactsAction.addContact(name, number))\r\n  }\r\n\r\n}*/\r\n\r\n\r\n\r\n\r\n","\nimport React from 'react'\nimport ContactList from './contactList/ContactList'\nimport Filter from './filter/Filter'\nimport ContactEditor from './contactEditor/ContactEditor'\nimport { CSSTransition } from 'react-transition-group'\nimport styles from './App.module.css'\n\n\n\n \n  const App = () => {\n\n\n    return (\n      <>\n      <ContactEditor/>\n\n      <CSSTransition\n      in={true}\n      timeout={3000}\n      classNames={styles}\n      unmountOnExit>\n        <Filter/>\n      </CSSTransition>\n      \n      <ContactList/>\n      \n      </>\n    )\n\n}\n\nexport default App\n\n\n\n\n///////////////////////////////////////////////////\n\n\n\n\n\n\n\n/*import React, { Component } from 'react'\nimport { v4 as uuidv4 } from \"uuid\";\nimport ContactList from './contactList/ContactList'\nimport Filter from './filter/Filter'\nimport ContactEditor from './contactEditor/ContactEditor'\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter:'', \n  }\n  \n  componentDidMount() {\n    if (localStorage.getItem('contacts')) \n    {this.setState({contacts: JSON.parse(localStorage.getItem('contacts'))})}\n  }\n  \n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n    localStorage.setItem('contacts', JSON.stringify(this.state.contacts))}\n    }\n    \n\n  setFilter = (e) => {\n    this.setState({filter: e.target.value})\n  }\n  filterContact =() => {\n    const {contacts, filter} = this.state\n    return contacts.filter(contact => \n      contact.name.toLowerCase().includes(filter.toLowerCase()))\n    }\n  \n \n  addContact = (name, number) => {\n    const searchName = this.state.contacts.map((contact) => contact.name).includes(name)\n    if(searchName) {alert(`${name} is already in contacts`)} \n    else {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number\n    }\n    this.setState(prevState => {\n      return{ contacts: [...prevState.contacts, contact]}})\n    }\n  }\n\n  deleteContact = (id) => {\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(contact=> contact.id !== id) \n      }})\n  }\n  render() {\n    const filtredContact = this.filterContact();\n    return (\n      <>\n      <ContactEditor onAddForm={this.addContact}/>\n      {this.state.contacts.length && <Filter value={this.state.filter} onChange={this.setFilter}/>}\n     {this.state.contacts.length && <ContactList contacts= {filtredContact} onDelete={this.deleteContact}/> }\n      \n      </>\n    )\n}\n}\n*/","import { createReducer } from '@reduxjs/toolkit';\r\nimport {combineReducers} from 'redux'\r\nimport {deleteContact, getFilter, getLocalContacts, addContact} from './contactsAction'\r\n\r\n\r\nconst items = createReducer ([], {\r\n        [addContact]: (state, action) =>\r\n            { \r\n            return [...state, action.payload]\r\n        },\r\n        [deleteContact]: (state, action) =>{\r\n            return state.filter(item=> item.id !== action.payload)\r\n        },\r\n        [getLocalContacts]: (_, action) => {\r\n            return [...action.payload]\r\n        }\r\n})\r\n\r\n\r\nconst filter = createReducer('',  {\r\n    [getFilter]: (_, action) =>\r\n     {return action.payload}\r\n       \r\n})\r\n\r\nexport default combineReducers({\r\n    items: items,\r\n    filter: filter,\r\n  \r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////\r\n\r\n\r\n/*import {combineReducers} from 'redux'\r\nimport actionsTypes from './contactsActionsTypes'\r\nconst items = (state=[], {type, payload}) => {\r\n    switch (type) {\r\n        case actionsTypes.ADD_CONTACT:\r\n            localStorage.setItem('contacts', JSON.stringify([...state, payload]));\r\n            /*if (localStorage.getItem('contacts')) ({\r\n                 [...state, JSON.parse(localStorage.getItem('contacts'))],\r\n                })*/\r\n            \r\n           /*if (\r\n                state.some(\r\n                  (item) => item.name === payload.name\r\n                )\r\n              ) {\r\n                return  [...state]/*, (state.contacts.alert: !state.contacts.alert)}*/\r\n              /*}else*/\r\n           /* return [...state, payload];\r\n        case actionsTypes.DELETE_CONTACT:\r\n            return  state.filter(item=> item.id !== payload.id); \r\n        default:\r\n           return state;\r\n    }\r\n}\r\n\r\n\r\nconst filter = (state='', {type, payload}) => {\r\n    switch (type) {\r\n        case actionsTypes.FILTER_CONTACTS:\r\n            return payload.value\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n/*const alert = (state=false, {type, payload}) => {\r\n    switch (type) {\r\n        case actionsTypes.SET_ALERT:\r\n            return {...state, alert: !state}\r\n        default:\r\n            return state;\r\n    }\r\n}*/\r\n\r\n/*export default combineReducers({\r\n    items: items,\r\n   /* alert: alert,*/\r\n    /*filter: filter,\r\n  \r\n})\r\n\r\n \r\n\r\n/*\r\n{\r\n  contacts: {\r\n    items: [],\r\n    filter: ''\r\n  }\r\n}\r\n\r\n\r\n  useEffect (() => {\r\n   localStorage.getItem('contacts') && setContacts(JSON.parse(localStorage.getItem('contacts')))\r\n  }, []);\r\n  \r\n\r\n useEffect (() => {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts))\r\n    }, [contacts])\r\n    \r\n\r\n  const getFilter = (e) => {\r\n    setFilter(e.target.value)\r\n  }\r\n  const filterContacts =() => {\r\n    return [...contacts.filter(item => \r\n      item.name.toLowerCase().includes(filter.toLowerCase()))]\r\n    }\r\n\r\n \r\n  const addContact = item => {\r\n    const searchName = contacts.map(contact => contact.name).includes(item.name)\r\n    if(searchName) {setTimeout(()=>setIsVisible(true), 500)\r\n    setTimeout(()=>setIsVisible(false), 2000)}\r\n    else {\r\n    setContacts([...contacts, {id: uuidv4(), ...item}])\r\n    \r\n    }\r\n  }\r\n  \r\n  const deleteContact = (e) => {\r\n    const id = e.target.dataset.id;\r\n    setContacts(\r\n      [...contacts.filter(contact=> contact.id !== id) \r\n    ])\r\n  }*/","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contactsReducer'\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n\r\n\r\n\r\n\r\n/*import {combineReducers, createStore} from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport contactsReducer from './contacts/contactsReducer'\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    contacts: contactsReducer,\r\n})\r\nconst store = createStore(rootReducer, composeWithDevTools())\r\n\r\nexport default store;\r\n\r\n/* const [contacts, setContacts] = useState([])\r\n  const [filter, setFilter] = useState('')\r\n  const [isVisible, setIsVisible] = useState(false);*/","import React from 'react';\nimport {Provider} from 'react-redux'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App'\nimport store from './redux/store'\n\n\nReactDOM.render(\n<Provider store={store}>\n<App />\n</Provider>\n    ,\n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}